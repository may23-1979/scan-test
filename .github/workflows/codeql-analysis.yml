
name: "Code Scanning (CodeQL + Psalm)"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'   # 毎週日曜

permissions:
  actions: read
  contents: read
  security-events: write   # SARIF をアップロードする権限

##########################
# 1) CodeQL ジョブ
##########################
jobs:
  codeql:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [ "actions", "javascript-typescript" ]
    steps:
      - uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

##########################
# 2) PHP (Psalm) ジョブ
##########################
  psalm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # PHP & Composer は Psalm が依存解決を参照する場合に備え導入
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer

      # composer.json があれば依存関係をインストール
      - name: Install Composer dependencies
        if: ${{ hashFiles('**/composer.json') != '' }}
        run: composer install --no-scripts --no-progress --prefer-dist

      # Psalm Security Scan を Docker で実行し、SARIF を生成
      - name: Run Psalm Security Scan
        id: psalm
        continue-on-error: true          # 脆弱性検出で非ゼロ終了しても後続を走らせる
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/app" \
            --workdir /app \
            ghcr.io/psalm/psalm-security-scan \
              --output-format=sarif \
              --no-cache \
              --report=psalm-results.sarif

      # SARIF を Code Scanning にアップロード
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: psalm-results.sarif
        if: ${{ steps.psalm.outcome != 'skipped' }}

