name: "Code Scanning (CodeQL + Semgrep)"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 0 * * 0"   # 毎週日曜

############################################
# グローバル権限：SARIF をアップロードするため
############################################
permissions:
  contents: read
  security-events: write
  actions: read           # private repo なら必須

##########################
# 1) CodeQL ─ GitHub Actions
##########################
jobs:
  codeql:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ['actions']           # JS/TS も CodeQL で解析したい場合は追加
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

###########################################
# 2) Semgrep ─ PHP / JS スキャン + SARIF
###########################################
  semgrep:
    runs-on: ubuntu-latest
    container: semgrep/semgrep:latest   # CLI 入り公式イメージ

    steps:
      - uses: actions/checkout@v4

      #####################################################
      # カスタム PHP SQLi ルールをリポジトリ内に生成
      #####################################################
      - name: Write custom PHP taint rule
        run: |
          mkdir -p .semgrep
          cat > .semgrep/php-sqli.yml <<'EOF'
          rules:
            - id: php-insecure-sql-query
              languages: [php]
              message: "未検証のユーザ入力が SQL クエリに直接使用されています（SQLインジェクションの可能性）。"
              severity: ERROR
              mode: taint
              pattern-sources:
                - pattern: $_GET[..]
              pattern-sinks:
                - patterns:
                    - pattern: $DB->query($QUERY)
                    - pattern: mysqli_query(..., $QUERY)
              pattern-sanitizers:
                - pattern: $DB->prepare(...)
          EOF

      #####################################################
      # Semgrep 実行（PHP & JS）―― SARIF を必ず生成
      #####################################################
      - name: Run Semgrep scan (PHP + JS)
        id: semgrep
        continue-on-error: true          # 脆弱性検出で exit=1 でも後続へ
        run: |
          semgrep scan \
            --config=p/owasp-top-ten \
            --config=p/phpcs-security-audit \
            --config=p/security-audit \
            --config=.semgrep/php-sqli.yml \
            --include '**/*.php' \
            --include '**/*.js' \
            --sarif \
            --output semgrep.sarif \
          || true

      #####################################################
      # SARIF が無い・空ならダミーファイルを生成
      #####################################################
      - name: Ensure SARIF exists
        run: |
          if [ ! -s semgrep.sarif ]; then
            echo "::warning ::SARIF が生成されなかったため空レポートを作成します"
            cat > semgrep.sarif <<'EMPTY'
            {
              "version":"2.1.0",
              "runs":[]
            }
            EMPTY
          fi

      #####################################################
      # SARIF を Code Scanning へアップロード
      #####################################################
      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
